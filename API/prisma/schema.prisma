// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// This table represents the basic login data of an user. At the application level, we must make sure
// that for every user created, a profile table is created
model Users {
  id       Int      @id @default(autoincrement())
  username String   @unique
  password String
  email    String   @unique
  profile  Profile?
  twoFactorEnabled Boolean  @default(false)
  twoFactorSecret  String?
}

// TO DO: Need to think about storing information like 2FA and stats.
model Profile {
  id          Int                  @id
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt()
  // This value stores the route to the avatar's location
  avatar      Avatar?
  online      Boolean              @default(false)
  user        Users                @relation(fields: [id], references: [id])
  friend1     Friends[]            @relation("Friend1")
  friend2     Friends[]            @relation("Friend2")
  //This field will not be added until work starts on the tournaments. For now is not valid.
  tournaments Tournament_Players[]
}

model Avatar {
  id Int @id
  name String @default("default-avatar.png")
  contentType String @default("image/png")
  profile Profile @relation(fields: [id], references: [id])
}

// It is imperative that user1Id is always the smallest index number to avoid duplicates. 
// Need to enforce at the application level
model Friends {
  user1Id Int
  user2Id Int
  status  Friendship
  user1   Profile    @relation("Friend1", fields: [user1Id], references: [id])
  user2   Profile    @relation("Friend2", fields: [user2Id], references: [id])

  @@id([user1Id, user2Id])
}

enum Friendship {
  FIRST_PENDING
  SECOND_PENDING
  FRIENDS
}

model Tournament {
  id         String               @id @default(ulid())
  startedAt  DateTime             @default(now())
  finishedAt DateTime?
  players    Tournament_Players[]
}

model Tournament_Players {
  playerAlias  String
  rank         Int
  playerId     Int
  tournamentId String
  players      Profile    @relation(fields: [playerId], references: [id])
  tournaments  Tournament @relation(fields: [tournamentId], references: [id])

  @@id([playerId, tournamentId])
}
